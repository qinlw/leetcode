class Solution {
public:
    void _searchRange(vector<int>& nums, vector<int>& ret, int target, int begin, int end)
    {
        if (begin > end) return;
        if (begin > 0)
        {
            if (nums[begin] > target && nums[begin - 1] == target) ret[1] = begin - 1;
        }
        if (end < nums.size() - 1)
        {
            if (nums[end] < target && nums[end + 1] == target) ret[0] = end + 1;
        }
        if (nums[begin] > target || nums[end] < target) return;

        if (begin > 0)
        {
            if (nums[begin] == target && nums[begin - 1] < target) ret[0] = begin;

        }             
        if (begin < nums.size() - 1)
        {
            if (nums[begin] < target && nums[begin + 1] == target) ret[0] = begin + 1;
        }
        if (begin == 0 && nums[begin] == target) ret[0] = begin;

        if (end < nums.size() - 1)
        {
            if (nums[end] == target && nums[end + 1] > target) ret[1] = end;
            if (nums[end] > target && nums[end - 1] == target) ret[1] = end - 1;
        }
        else if (end == nums.size() - 1 && end > 0 && nums[end] > target)
        { 
            if (nums[end] > target && nums[end - 1] == target) ret[1] = end - 1;
        }
        else if (end == nums.size() - 1 && nums[end] == target) ret[1] = end;

        int div = (begin + end) / 2;
        if (nums[div] <= target ) _searchRange(nums, ret, target, div + 1, end);
        if (nums[div] >= target ) _searchRange(nums, ret, target, begin, div - 1);
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ret(2);
        ret[0] = ret[1] = -1;
        _searchRange(nums, ret, target, 0, nums.size() - 1);

        return ret;
    }
};

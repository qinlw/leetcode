class Solution {
public:
    string addString(string num1, string num2)
    {
        int end1 = num1.size() - 1, end2 = num2.size() - 1;
        int next = 0;
        string ret;

        while(end1 >= 0 || end2 >= 0)
        {
            int val1= 0, val2 = 0, sum = 0;
            if (end1 >= 0) val1 = num1[end1] - 48;
            if (end2 >= 0) val2 = num2[end2] - 48;  
            sum = val1 + val2 + next;
            if (sum > 9) {sum -= 10; next = 1;}
            else next = 0;

            ret.insert(ret.begin(), sum + '0');
            end1--;
            end2--;
        }

        if (next) ret.insert(ret.begin(), '1');

        return ret;
    }

    string multiply(string num1, string num2) 
    {
        if (num1 == "0" || num2 == "0") return "0";
        int end1 = num1.size() - 1, end2 = num2.size() - 1;
        string ret[num1.size()];

        while (end1 >= 0)
        {
            int next = 0;
            int val1 = (num1[end1] - 48);
            int zero = num1.size() - end1 - 1;
            while (end2 >= 0)
            {
                while (zero)
                {
                    ret[num1.size() - end1 - 1].insert(ret[num1.size() - end1 - 1].begin(), 48);
                    zero--;
                }
                int val2 = num2[end2] - 48;
                int product = val1 * val2 + next;
                if (product > 9) { next = product / 10; product %= 10; }
                else next = 0;

                ret[num1.size() - end1 - 1].insert(ret[num1.size() - end1 - 1].begin(), product + 48);
                end2--;
                
                if (end2 == -1 && next) ret[num1.size() - end1 - 1].insert(ret[num1.size() - end1 - 1].begin(), next + 48);
            }
            end1--;
            end2 = num2.size() - 1;
        }

        string retSum;
        for (size_t i = 0; i < num1.size(); i++)
        {
            retSum = addString(retSum, ret[i]);
        }

        return retSum;
    }
};

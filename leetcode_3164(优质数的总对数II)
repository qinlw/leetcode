class Solution {
public:
    int binarySearch(vector<int>& nums1, int target, bool isLeft){
        int left = 0, right = nums1.size() - 1, ans = nums1.size();
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums1[mid] > target || (isLeft && nums1[mid] >= target)){
                right = mid - 1;
                ans = mid;
            }else {
                left = mid + 1;
            }
        }

        return ans;
    }

    vector<int> searchRange(vector<int>& nums1, int target){
        int leftIndex = binarySearch(nums1, target, true);
        int rightIndex = binarySearch(nums1, target, false) - 1;

        if (leftIndex <= rightIndex && nums1[leftIndex] == target && nums1[rightIndex] == target) {
            return vector<int>{leftIndex, rightIndex};
        }else {
            return vector<int>{0, -1};
        }
    }

    bool isSame(int a, int b) {
        double c = (double)a / (double)b;
        int d = a / b;
        if (c == d) return true;
        return false;
    }

    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        long long ans = 0;
        sort(nums1.begin(), nums1.end());
        sort(nums2.begin(), nums2.end());
        for (auto n : nums2) {
            for (int t = 1; t * n * k <= *nums1.rbegin(); ++t) {
                if (isSame(*nums1.begin(), t * n * k)) t = *nums1.begin() / (n * k);
                vector<int> v = searchRange(nums1, t * n * k);
                ans += v[1] - v[0] + 1;
            }
        }

        return ans;
    }
};
